var c = Object.defineProperty;
var T = (o, e, s) => e in o ? c(o, e, { enumerable: !0, configurable: !0, writable: !0, value: s }) : o[e] = s;
var u = (o, e, s) => (T(o, typeof e != "symbol" ? e + "" : e, s), s);
import { g as C, l as U, c as f } from "./format-CMbjATj9.js";
class l {
  constructor(e) {
    u(this, "date");
    this.date = e;
  }
  static set(e) {
    const s = C(e);
    return new l(s);
  }
  plus(e) {
    const {
      day: s = 0,
      month: a = 0,
      year: i = 0,
      hour: n = 0,
      minute: d = 0,
      second: r = 0
    } = e, t = new Date(this.date.getTime());
    return i && t.setUTCFullYear(t.getUTCFullYear() + i), a && t.setUTCMonth(t.getUTCMonth() + a), s && t.setUTCDate(t.getUTCDate() + s), n && t.setUTCHours(t.getUTCHours() + n), d && t.setUTCMinutes(t.getUTCMinutes() + d), r && t.setUTCSeconds(t.getUTCSeconds() + r), new l(t);
  }
  minus(e) {
    const {
      day: s = 0,
      month: a = 0,
      year: i = 0,
      hour: n = 0,
      minute: d = 0,
      second: r = 0
    } = e, t = new Date(this.date.getTime());
    return i && t.setUTCFullYear(t.getUTCFullYear() - i), a && t.setUTCMonth(t.getUTCMonth() - a), s && t.setUTCDate(t.getUTCDate() - s), n && t.setUTCHours(t.getUTCHours() - n), d && t.setUTCMinutes(t.getUTCMinutes() - d), r && t.setUTCSeconds(t.getUTCSeconds() - r), new l(t);
  }
  diffNow(e) {
    return this.diff(new l(/* @__PURE__ */ new Date()), e);
  }
  diff(e, s = ["milliseconds"]) {
    const a = this.date.getTime() - e.date.getTime(), i = {}, n = Math.abs(a);
    return s.includes("milliseconds") && (i.milliseconds = n), s.includes("seconds") && (i.seconds = n / 1e3), s.includes("minutes") && (i.minutes = n / (1e3 * 60)), s.includes("hours") && (i.hours = n / (1e3 * 60 * 60)), s.includes("days") && (i.days = n / (1e3 * 60 * 60 * 24)), s.includes("weeks") && (i.weeks = n / (1e3 * 60 * 60 * 24 * 7)), s.includes("months") && (i.months = (this.date.getUTCFullYear() - e.date.getUTCFullYear()) * 12 + (this.date.getUTCMonth() - e.date.getUTCMonth())), s.includes("quarters") && (i.quarters = (i.months ?? (this.date.getUTCFullYear() - e.date.getUTCFullYear()) * 12 + (this.date.getUTCMonth() - e.date.getUTCMonth())) / 3), s.includes("years") && (i.years = (i.months ?? (this.date.getUTCFullYear() - e.date.getUTCFullYear()) * 12 + (this.date.getUTCMonth() - e.date.getUTCMonth())) / 12), i;
  }
  toString(e) {
    const { localeOptions: s, locale: a, format: i } = e || {};
    return U({
      date: this.date,
      option: s || {
        month: "short",
        day: "numeric",
        year: "numeric"
      },
      locale: a,
      format: i
    });
  }
  toObject() {
    return f(this.date);
  }
  toJSDate() {
    return this.date;
  }
  toMillis() {
    return this.date.getTime();
  }
  toISO() {
    return this.date.toISOString();
  }
}
export {
  l as D
};
