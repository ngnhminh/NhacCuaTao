const L = (t) => typeof t == "function" ? t() : t, g = (t, e) => new Intl.NumberFormat(e || "en-US", {
  useGrouping: !1
}).format(t), S = (t, e, r) => {
  const n = new Date(t, e, r);
  return n.setFullYear(t), n;
}, a = (t, e) => String(Math.ceil(t)).padStart(e ?? 2, "0"), d = (t) => t === 0 ? 12 : t === 12 ? 0 : t > 12 ? t - 12 : t, w = (t) => t >= 12 ? "PM" : "AM", H = (t, e) => e === "AM" ? t === 12 ? 0 : t : t === 0 ? 12 : t === 12 ? t : t + 12;
function F() {
  const t = /* @__PURE__ */ new Date();
  let e = t.getHours();
  const r = t.getMinutes(), n = t.getSeconds();
  let o = "AM";
  return e > 12 && (e -= 12, o = "PM"), e === 12 && (o = "PM"), e === 0 && (e = 12), {
    hour: e,
    minute: r,
    second: n,
    meridiem: o
  };
}
function b({
  startYear: t,
  endYear: e,
  count: r,
  year: n,
  yearRange: o,
  locale: c
}) {
  const u = n || (/* @__PURE__ */ new Date()).getFullYear();
  if (!t) {
    const i = Math.floor(u / r) * r;
    i === u ? t = u - r + 1 : t = i + 1;
  }
  e || (e = t + r - 1);
  const s = [];
  let l = t, p = e;
  for (let i = t; i <= e; i++) {
    if (o != null && o.start && i < (o == null ? void 0 : o.start)) {
      s.push(""), l = o == null ? void 0 : o.start;
      continue;
    }
    if (o != null && o.end && i > (o == null ? void 0 : o.end)) {
      s.push(""), p = o == null ? void 0 : o.end;
      continue;
    }
    s.push(g(i, c));
  }
  return {
    array: s,
    range: `${g(l, c)} - ${g(p, c)}`,
    startYear: t,
    endYear: e
  };
}
const f = (t, e, r = "en-US") => {
  const n = h(t);
  return e = e.replace(
    new RegExp("(?<!~)(?<!n)nn(?!n)", "g"),
    n.toLocaleString(r, { minute: "2-digit" }).padStart(2, "0")
  ).replace(
    new RegExp("(?<!~)(?<!n)n(?!n)", "g"),
    n.toLocaleString(r, { minute: "numeric" })
  ).replace(
    new RegExp("(?<!~)(?<!s)ss(?!s)", "g"),
    n.toLocaleString(r, { second: "2-digit" }).padStart(2, "0")
  ).replace(
    new RegExp("(?<!~)(?<!s)s(?!s)", "g"),
    n.toLocaleString(r, { second: "numeric" })
  ).replace(
    new RegExp("(?<!~)(?<!h)hh(?!h)", "g"),
    n.toLocaleString(r, { hour: "2-digit", hour12: !0 }).split(" ")[0].padStart(2, "0")
  ).replace(
    new RegExp("(?<!~)(?<!h)h(?!h)", "g"),
    n.toLocaleString(r, { hour: "numeric", hour12: !0 })
  ).replace(
    new RegExp("(?<!~)(?<!H)HH(?!H)", "g"),
    n.toLocaleString(r, { hour: "2-digit", hour12: !1 }).split(" ")[0].padStart(2, "0")
  ).replace(
    new RegExp("(?<!~)(?<!H)H(?!H)", "g"),
    n.toLocaleString(r, { hour: "numeric", hour12: !1 })
  ).replace(
    new RegExp("(?<!~)(?<!a)a(?!a)", "g"),
    M(
      n.toLocaleString(r, { hour: "numeric", hour12: !0 }).split(" ")[1]
    )
  ).replace(
    new RegExp("(?<!~)(?<!y)yyyy(?!y)", "g"),
    n.toLocaleString(r, { year: "numeric" })
  ).replace(
    new RegExp("(?<!~)(?<!y)yy(?!y)", "g"),
    n.toLocaleString(r, { year: "2-digit" })
  ).replace(
    new RegExp("(?<!~)(?<!m)m(?!m)", "g"),
    n.toLocaleString(r, { month: "numeric" })
  ).replace(
    new RegExp("(?<!~)(?<!m)mm(?!m)", "g"),
    n.toLocaleString(r, { month: "2-digit" })
  ).replace(
    new RegExp("(?<!~)(?<!d)dd(?!d)", "g"),
    n.toLocaleString(r, { day: "2-digit" })
  ).replace(
    new RegExp("(?<!~)(?<!d)d(?!d)", "g"),
    n.toLocaleString(r, { day: "numeric" })
  ).replace(
    new RegExp("(?<!~)(?<!D)DDD(?!D)", "g"),
    m(n.toLocaleString(r, { weekday: "long" }))
  ).replace(
    new RegExp("(?<!~)(?<!D)DD(?!D)", "g"),
    m(n.toLocaleString(r, { weekday: "short" }))
  ).replace(
    new RegExp("(?<!~)(?<!D)D(?!D)", "g"),
    m(n.toLocaleString(r, { weekday: "narrow" }))
  ).replace(
    new RegExp("(?<!~)(?<!M)MMM(?!M)", "g"),
    n.toLocaleString(r, { month: "long" })
  ).replace(
    new RegExp("(?<!~)(?<!M)MM(?!M)", "g"),
    n.toLocaleString(r, { month: "short" })
  ).replace(
    new RegExp("(?<!~)(?<!M)M(?!M)", "g"),
    n.toLocaleString(r, { month: "narrow" })
  ).replace(/~y/g, "y").replace(/~m/g, "m").replace(/~M/g, "M").replace(/~d/g, "d").replace(/~D/g, "D").replace(/~H/g, "H").replace(/~n/g, "n").replace(/~s/g, "s").replace(/~a/g, "a").replace(/~h/g, "h"), e;
}, h = (t) => {
  let e;
  return typeof t == "string" || typeof t == "number" ? e = new Date(t) : t instanceof Date ? e = t : e = S(
    t.year || 2023,
    !t.month && t.month !== 0 ? 1 : t.month,
    t.day
  ), e;
}, A = (t) => {
  const e = t.getFullYear(), r = t.getMonth(), n = t.getDate();
  return {
    year: e,
    month: r,
    day: n
  };
}, k = (t) => {
  const e = /* @__PURE__ */ new Date(), r = (t == null ? void 0 : t.year) ?? e.getFullYear(), n = (t == null ? void 0 : t.month) === 0 ? 0 : (t == null ? void 0 : t.month) ?? e.getMonth(), o = (t == null ? void 0 : t.day) ?? e.getDate(), c = new Date(r, n, o);
  return c.setFullYear(r), c;
}, v = (t, e) => {
  const { localeOptions: r, locale: n, format: o } = e || {}, c = h(t);
  return D({
    date: c,
    option: r || {
      month: "short",
      day: "numeric",
      year: "numeric"
    },
    locale: n,
    format: o
  });
}, D = ({
  format: t,
  option: e,
  date: r,
  locale: n
}) => t ? f(r, t, n) : r.toLocaleDateString(n ?? "en-US", e), m = (t) => t.startsWith("M") ? "~" + t : t, M = (t) => t === "AM" ? "A~M" : t === "PM" ? "P~M" : t, P = (t) => t === 0 ? 12 : t !== void 0 ? a(t) : "", I = (t) => t !== void 0 ? a(t) : "";
export {
  k as a,
  d as b,
  A as c,
  w as d,
  H as e,
  v as f,
  h as g,
  F as h,
  a as i,
  L as j,
  b as k,
  D as l,
  S as m,
  P as n,
  I as o,
  g as p
};
