import { CustomAccessor } from './generate';
import { DateArray, DateObjectUnits, Locale, MakeOptionalRequired, MonthDaysObject, MonthStatus } from './types';

export declare const getToday: () => MakeOptionalRequired<DateObjectUnits>;
export declare const checkIfItsTodayDate: (date: Date | MakeOptionalRequired<DateObjectUnits>) => boolean;
export declare const isBeforeDate: (first: MakeOptionalRequired<DateObjectUnits> | Date, second: MakeOptionalRequired<DateObjectUnits> | Date) => boolean;
export declare const getMonthName: (month: number, format?: "narrow" | "long" | "short", locale?: Locale) => string;
export declare const clickOutside: (ref: HTMLElement, callback: (e: MouseEvent) => void) => () => void;
export declare const isDayInBetweenRange: ({ day, endDate, startDate, year, month, monthStatus, }: {
    day: number;
    month: number;
    year: number;
    startDate: DateObjectUnits | undefined;
    endDate: DateObjectUnits | undefined;
    monthStatus: MonthStatus;
}) => boolean;
export declare const isDayTipRange: ({ dateRange, day, year, month, monthStatus, }: {
    day: number;
    month: number;
    year: number;
    dateRange: DateObjectUnits | undefined;
    monthStatus: MonthStatus;
}) => boolean;
export declare const isMinMaxDate: ({ maxDate, minDate, day, year, month, }: {
    minDate: MakeOptionalRequired<DateObjectUnits> | undefined;
    maxDate: MakeOptionalRequired<DateObjectUnits> | undefined;
    day: MonthDaysObject;
    year: CustomAccessor<number>;
    month: CustomAccessor<number>;
}) => boolean;
export declare const isPartOfDisabledDays: ({ disabledDays, month, day, year, }: {
    disabledDays?: DateArray[];
    day: MonthDaysObject;
    month: number;
    year: number;
}) => boolean;
export declare const isNotPartOfEnabledDays: ({ enabledDays, day, year, month, next, prev, }: {
    enabledDays?: DateArray[];
    day?: MonthDaysObject;
    month: number;
    year: number;
    next?: boolean;
    prev?: boolean;
}) => boolean;
export declare const isDateRangeDisabled: (startDate: Date, endDate: Date, disabledDays?: DateArray[]) => boolean;
export declare const isDateRangeEnabled: (startDate: Date, endDate: Date, enabledDays?: DateArray[]) => true | undefined;
export declare const isWeekendStatus: ({ year, month, day, }: {
    day: MonthDaysObject;
    month: number;
    year: number;
}) => {
    isWeekend: boolean;
    isSaturday: boolean;
    isSunday: boolean;
};
export declare const compareObjectDate: (first: DateObjectUnits, second: DateObjectUnits) => boolean;
