import { default as DateMath } from './math';

export * from './types';
declare const utils: () => {
    getToday: () => import('./types').MakeOptionalRequired<import('./types').DateObjectUnits>;
    convertDateObjectToDate: (date: import('./types').DateObjectUnits) => Date;
    convertDateToDateObject: (date: Date) => import('./types').MakeOptionalRequired<import('./types').DateObjectUnits>;
    checkIfItsTodayDate: (date: import('./types').MakeOptionalRequired<import('./types').DateObjectUnits> | Date) => boolean;
    isBeforeDate: (first: import('./types').MakeOptionalRequired<import('./types').DateObjectUnits> | Date, second: import('./types').MakeOptionalRequired<import('./types').DateObjectUnits> | Date) => boolean;
    getMonthName: (month: number, format?: "narrow" | "long" | "short", locale?: Intl.LocalesArgument) => string;
    formatDate: (date: import('./types').DateOption, options?: {
        localeOptions?: Intl.DateTimeFormatOptions | undefined;
        locale?: Intl.LocalesArgument;
        format?: string | undefined;
    } | undefined) => string;
    clickOutside: (ref: HTMLElement, callback: (e: MouseEvent) => void) => () => void;
    convert24HourTo12Hour: (hour: number) => number;
    getAmPm: (hour: number) => import('./types').TimeMeridiem;
    convert12HourTo24Hour: (hour: number, meridiem: "AM" | "PM") => number;
    getCurrentTime: typeof import('./time').getCurrentTime;
    smartDropDownPosition: ({ inputRef, dropDownRef, positionX, positionY, }: {
        inputRef: (HTMLElement | null | undefined) | (() => HTMLElement | null | undefined);
        dropDownRef: (HTMLElement | null | undefined) | (() => HTMLElement | null | undefined);
        positionY?: "top" | "bottom" | "auto" | undefined;
        positionX?: "center" | "left" | "right" | undefined;
    }) => {
        top?: string | undefined;
        left?: string | undefined;
    };
    labelFormat: ({ format, option, date, locale, }: {
        date: Date;
        format?: string | undefined;
        option: Intl.DateTimeFormatOptions;
        locale?: Intl.LocalesArgument;
    }) => string;
    leadingZeros: (value: number, numberOfLeadingZero?: number | undefined) => string;
};
export { utils, DateMath };
