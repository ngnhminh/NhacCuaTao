declare const utils: () => {
    clickOutside: (ref: HTMLElement, callback: (e: MouseEvent) => void) => () => void;
    getMonthName: (month: number, format?: "short" | "long" | "narrow" | undefined, locale?: Intl.LocalesArgument) => string;
    getToday: () => import("@rnwonder/simple-datejs/dateMath").MakeOptionalRequired<import("@rnwonder/simple-datejs/dateMath").DateObjectUnits>;
    isBeforeDate: (first: Date | import("@rnwonder/simple-datejs/dateMath").MakeOptionalRequired<import("@rnwonder/simple-datejs/dateMath").DateObjectUnits>, second: Date | import("@rnwonder/simple-datejs/dateMath").MakeOptionalRequired<import("@rnwonder/simple-datejs/dateMath").DateObjectUnits>) => boolean;
    formatDate: (date: import("@rnwonder/simple-datejs/dateMath").DateOption, options?: {
        localeOptions?: Intl.DateTimeFormatOptions | undefined;
        locale?: Intl.LocalesArgument;
        format?: string | undefined;
    } | undefined) => string;
    labelFormat: ({ format, option, date, locale, }: {
        date: Date;
        format?: string | undefined;
        option: Intl.DateTimeFormatOptions;
        locale?: Intl.LocalesArgument;
    }) => string;
    convertDateObjectToDate: (date: import("@rnwonder/simple-datejs/dateMath").DateObjectUnits) => Date;
    convertDateToDateObject: (date: Date) => import("@rnwonder/simple-datejs/dateMath").MakeOptionalRequired<import("@rnwonder/simple-datejs/dateMath").DateObjectUnits>;
    checkIfItsTodayDate: (date: Date | import("@rnwonder/simple-datejs/dateMath").MakeOptionalRequired<import("@rnwonder/simple-datejs/dateMath").DateObjectUnits>) => boolean;
    convert12HourTo24Hour: (hour: number, meridiem: "AM" | "PM") => number;
    convert24HourTo12Hour: (hour: number) => number;
    leadingZeros: (value: number, numberOfLeadingZero?: number | undefined) => string;
    getAmPm: (hour: number) => import("@rnwonder/simple-datejs/dateMath").TimeMeridiem;
    getCurrentTime: typeof import("@rnwonder/simple-datejs/dist/lib/time").getCurrentTime;
    smartDropDownPosition: ({ inputRef, dropDownRef, positionX, positionY, }: {
        inputRef: HTMLElement | (() => HTMLElement | null | undefined) | null | undefined;
        dropDownRef: HTMLElement | (() => HTMLElement | null | undefined) | null | undefined;
        positionY?: "auto" | "top" | "bottom" | undefined;
        positionX?: "center" | "left" | "right" | undefined;
    }) => {
        top?: string | undefined;
        left?: string | undefined;
    };
};
export * from "./portal";
export * from "./class";
export * from "./general";
export { utils };
