import { g as l, l as T, c as h } from "./format-CMbjATj9.js";
var c = Object.defineProperty, C = (d, s, n) => (((r, t, a) => {
  t in r ? c(r, t, { enumerable: !0, configurable: !0, writable: !0, value: a }) : r[t] = a;
})(d, typeof s != "symbol" ? s + "" : s, n), n);
class u {
  constructor(s) {
    C(this, "date"), this.date = s;
  }
  static set(s) {
    const n = l(s);
    return new u(n);
  }
  plus(s) {
    const { day: n = 0, month: r = 0, year: t = 0, hour: a = 0, minute: i = 0, second: o = 0 } = s, e = new Date(this.date.getTime());
    return t && e.setUTCFullYear(e.getUTCFullYear() + t), r && e.setUTCMonth(e.getUTCMonth() + r), n && e.setUTCDate(e.getUTCDate() + n), a && e.setUTCHours(e.getUTCHours() + a), i && e.setUTCMinutes(e.getUTCMinutes() + i), o && e.setUTCSeconds(e.getUTCSeconds() + o), new u(e);
  }
  minus(s) {
    const { day: n = 0, month: r = 0, year: t = 0, hour: a = 0, minute: i = 0, second: o = 0 } = s, e = new Date(this.date.getTime());
    return t && e.setUTCFullYear(e.getUTCFullYear() - t), r && e.setUTCMonth(e.getUTCMonth() - r), n && e.setUTCDate(e.getUTCDate() - n), a && e.setUTCHours(e.getUTCHours() - a), i && e.setUTCMinutes(e.getUTCMinutes() - i), o && e.setUTCSeconds(e.getUTCSeconds() - o), new u(e);
  }
  diffNow(s) {
    return this.diff(new u(/* @__PURE__ */ new Date()), s);
  }
  diff(s, n = ["milliseconds"]) {
    const r = this.date.getTime() - s.date.getTime(), t = {}, a = Math.abs(r);
    return n.includes("milliseconds") && (t.milliseconds = a), n.includes("seconds") && (t.seconds = a / 1e3), n.includes("minutes") && (t.minutes = a / 6e4), n.includes("hours") && (t.hours = a / 36e5), n.includes("days") && (t.days = a / 864e5), n.includes("weeks") && (t.weeks = a / 6048e5), n.includes("months") && (t.months = 12 * (this.date.getUTCFullYear() - s.date.getUTCFullYear()) + (this.date.getUTCMonth() - s.date.getUTCMonth())), n.includes("quarters") && (t.quarters = (t.months ?? 12 * (this.date.getUTCFullYear() - s.date.getUTCFullYear()) + (this.date.getUTCMonth() - s.date.getUTCMonth())) / 3), n.includes("years") && (t.years = (t.months ?? 12 * (this.date.getUTCFullYear() - s.date.getUTCFullYear()) + (this.date.getUTCMonth() - s.date.getUTCMonth())) / 12), t;
  }
  toString(s) {
    const { localeOptions: n, locale: r, format: t } = s || {};
    return T({ date: this.date, option: n || { month: "short", day: "numeric", year: "numeric" }, locale: r, format: t });
  }
  toObject() {
    return h(this.date);
  }
  toJSDate() {
    return this.date;
  }
  toMillis() {
    return this.date.getTime();
  }
  toISO() {
    return this.date.toISOString();
  }
}
export {
  u as D
};
